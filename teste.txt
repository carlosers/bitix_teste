[Especificações para o teste]

Observações:
- "Plano" dito aqui significa "Plano de Saúde".
- "Beneficiários" são as pessoas participantes/pagantes de um plano de saúde.


1. Você recebeu duas tabelas em JSON, uma de Planos e outra de Preços.
	- A tabela de plano possui os planos que serão vendidos.
	- A tabela de preço possui o(s) preço(s) para cada plano listado na tabela de planos.


2. Cada plano tem três faixas de preços, sendo estas categorizadas por idade:
	- Pessoas de 0 a 17 anos vão para a faixa1.
	- Pessoas de 18 a 40 anos vão para a faixa2.
	- Pessoas com mais de 40 anos vão para a faixa3.


3. Cada plano pode ter preços variados dependendo da quantidade de pessoas participando do mesmo.
	- Essa variação é representada na tabela de preços pela coluna "minimo_vidas".


------------------------
Com as especificações acima, faça um programa que permita a entrada dos seguintes dados, salvando-os em um Json chamado beneficiarios.json:
	- Quantidade de beneficiários
	- Idade de cada beneficiário
	- Nome de cada beneficiário
	- Registro do plano escolhido (deve ser um dos registros listados na tabela de plano)
		-> Caso o usuário liste um registro inexistente, deve mostrar mensagem de erro.



Esse programa deve ler a tabela de Plano e a tabela de Preço, e retornar:
	- O preço total do Plano escolhido (soma do preço de cada beneficiário)
	- Preço de cada beneficiário para o plano escolhido, juntamente com a sua idade.
	
	Nota: o valor (preço) para cada beneficiário deve ser float, pois representa dinheiro.
	
Ao final, unir todas as informações e salvar em um JSON chamado proposta.json

Nota: Seu programa deve ser feito utilizando a linguagem PHP. Se preferir, não precisa fazer uma interface gráfica (PHP CLI #raiz).
Nota: Também pode-se fazer utilizando a linguagem BIRL (https://birl-language.github.io/)


Ao término, dê reply no e-mail que você originalmente recebeu com os dados do teste, com a resolução.
Tempo total: 4 dias

INÍCIO DO CÓDIGO
HORA DO SHOW
//código aqui
BIRL

TIPOS DE DADOS
FRANGO FR = 'a'; (char)
MONSTRINHO M1 = 13; (short)
MONSTRO M2 = 37; (int)
MONSTRAO M3 = 666; (long)
TIPOS DE DADOS
TRAPEZIO T = 0.13; (float)
TRAPEZIO DESCENDENTE TD = 0.37; (double)
BICEPS FRANGO BF = 200; (unsigned) // BICEPS = const

PRINTAR NA TELA

CE QUER VER ESSA PORRA? ("Hello, Mutante");

LER DA TELA
MONSTRO X;
QUE QUE CE QUER MONSTRAO? ("%d", &X);

IF

ELE QUE A GENTE QUER? (3 > 2)
//código a ser executado
BIRL

IF/ELSE
ELE QUE A GENTE QUER? (X > 2)
//caso verdadeiro
NAO VAI DAR NAO
//caso falso
BIRL
ELSE IF
ELE QUE A GENTE QUER? (X > 2)
//X > 2
QUE NAO VAI DAR O QUE? (X < 2)
//X < 2
NAO VAI DAR NAO
//X = 2
BIRL
WHILE

MONSTRO X = 5;
NEGATIVA BAMBAM (X > 2)
//rodar código
X--;
BIRL

FOR


MONSTRO M;
MAIS QUERO MAIS (M = 0; M < 5; M++)
CE QUER VER ESSA PORRA? ("%d", M);
BIRL

BREAK/CONTINUE
MONSTRO M;
MAIS QUERO MAIS (M = 0; M < 5; M++)
//continue
VAMO MONSTRO;
//break
SAI FILHO DA PUTA;
BIRL
DECLARAR FUNÇÃO
OH O HOME AI PO (MONSTRO NOMEFUNC(MONSTRO A, MONSTRO B))
//código da função
BORA CUMPADE 1;
BIRL
CHAMAR FUNÇÃO
MONSTRO A = 5;
MONSTRO B = 8;
MONSTRO C = AJUDA O MALUCO TA DOENTE SOMAR(A, B);



Good luck and have fun :)